package Q4.Prog7000l;
import java.util.*;
import java.io.*;

public class prog7000l {
    public static void main(String[] args) {
        try {
            Scanner file = new Scanner(new File("Langdat/prog7000l.csv"));
            var x = new ArrayList<Double[]>();
            var y = new ArrayList<Double>();
            // Home,Price,SqFt,Bedrooms,Bathrooms,Offers,Brick,Neighborhood
            file.nextLine();
            while (file.hasNextLine()) {
                String line = file.nextLine();
                String[] data = line.split(",");
                Double[] row = {
                        Double.parseDouble(data[2]),
                        Double.parseDouble(data[0])
                };
                y.add(Double.parseDouble(data[1]));
                x.add(row);
            }
            var X_trian = new double[x.size()][2];
            for (int i = 0; i < x.size(); i++) {
                X_trian[i][0] = x.get(i)[0];
                X_trian[i][0] = x.get(i)[1];
            }
            var y_train = new double[x.size()];
            for (int i = 0; i < y.size(); i++)
                y_train[i] = y.get(i);

            var lr = new LinearRegression(60, 100, 0.000_0001, 00001);
            lr.fit(X_trian, y_train, 100);
            System.out.println(lr);

            double sqFoot = 1897;
            // Find comparable data point
            double closestPoint = X_trian[0][0];
            int closestIndex = 0;
            for (int i = 1; i < X_trian.length; i++) {
                if (Math.abs(X_trian[i][0]-sqFoot) < Math.abs(closestPoint - sqFoot)) {
                    closestPoint = X_trian[i][0];
                    closestIndex = i;
                }
            }
            System.out.println("Predicted price for " + sqFoot  + " sqft: " + lr.predict(sqFoot));
            System.out.println("Compared to " + closestPoint + " sqft: " + y_train[closestIndex]);


        } catch (IOException e) {
            System.out.println("Error: " + e);
        }
    }
}
/*
Regression line: y = 82.03768138269447 * x +101.26406758436529
Objective: [2.26579293E12, 2.2639377014017026E12, 2.2620845227022427E12, 2.2602333916365986E12, 2.258384305942242E12, 2.2565372633591533E12, 2.2546922616298037E12, 2.252849298499165E12, 2.2510083717146953E12, 2.2491694790263438E12, 2.2473326181865444E12, 2.2454977869502197E12, 2.2436649830747666E12, 2.2418342043200605E12, 2.240005448448459E12, 2.2381787132247827E12, 2.236353996416327E12, 2.2345312957928564E12, 2.232710609126594E12, 2.230891934192229E12, 2.229075268766907E12, 2.227260610630232E12, 2.225447957564259E12, 2.2236373073534956E12, 2.221828657784895E12, 2.2200220066478584E12, 2.218217351734229E12, 2.2164146908382886E12, 2.214614021756756E12, 2.212815342288786E12, 2.211018650235967E12, 2.209223943402311E12, 2.2074312195942607E12, 2.2056404766206816E12, 2.203851712292862E12, 2.2020649244245024E12, 2.200280110831728E12, 2.1984972693330674E12, 2.1967163977494705E12, 2.1949374939042864E12, 2.1931605556232717E12, 2.1913855807345857E12, 2.1896125670687874E12, 2.1878415124588333E12, 2.1860724147400742E12, 2.1843052717502537E12, 2.1825400813295007E12, 2.1807768413203352E12, 2.1790155495676604E12, 2.1772562039187563E12, 2.175498802223288E12, 2.1737433423332913E12, 2.1719898221031804E12, 2.1702382393897344E12, 2.1684885920521055E12, 2.1667408779518079E12, 2.1649950949527217E12, 2.1632512409210852E12, 2.1615093137254956E12, 2.159769311236905E12, 2.1580312313286155E12, 2.1562950718762847E12, 2.1545608307579119E12, 2.152828505853841E12, 2.1510980950467651E12, 2.149369596221708E12, 2.147643007266037E12, 2.145918326069449E12, 2.1441955505239758E12, 2.1424746785239766E12, 2.1407557079661387E12, 2.1390386367494727E12, 2.1373234627753115E12, 2.135610183947304E12, 2.1338987981714197E12, 2.1321893033559387E12, 2.130481697411453E12, 2.1287759782508638E12, 2.1270721437893801E12, 2.1253701919445105E12, 2.1236701206360662E12, 2.1219719277861604E12, 2.1202756113191982E12, 2.1185811691618787E12, 2.116888599243192E12, 2.1151978994944185E12, 2.1135090678491228E12, 2.11182210224315E12, 2.1101370006146335E12, 2.1084537609039768E12, 2.1067723810538633E12, 2.1050928590092522E12, 2.1034151927173662E12, 2.1017393801277004E12, 2.1000654191920183E12, 2.0983933078643435E12, 2.096723044100956E12, 2.0950546258604053E12, 2.093388051103485E12, 2.0917233177932468E12]
Min. Objective: 2.0917233177932468E12
Predicted price for 1897.0 sqft: 155726.74565055576
Compared to 128.0 sqft: 124600.0
*/